import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.datasets import imdb
from keras.utils import to_categorical
from keras import models
from keras import layers
import tensorflow as tf

(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)
data = np.concatenate((X_train, X_test), axis=0)
label = np.concatenate((y_train, y_test), axis=0)

print("Shapes:")
print("X_train:", X_train.shape)
print("X_test:", X_test.shape)
print("y_train:", y_train.shape)
print("y_test:", y_test.shape)

print("Review is:", X_train[0])  # Series of no converted word to vocabulary associated with index
print("Review is:", y_train[0])

vocab = imdb.get_word_index()  # Retrieve the word index file mapping words to indices
print("Vocabulary:", vocab)

def vectorize(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1
    return results

test_x = data[:10000]
test_y = label[:10000]
train_x = data[10000:]
train_y = label[10000:]

print("Shapes after split:")
print("test_x:", test_x.shape)
print("train_x:", train_x.shape)
print("train_y:", train_y.shape)
print("test_y:", test_y.shape)

print("Categories:", np.unique(label))
print("Number of unique words:", len(np.unique(np.hstack(data))))

length = [len(i) for i in data]
print("Average Review length:", np.mean(length))
print("Standard Deviation:", round(np.std(length)))
print("Label:", label[0])

print("Label:", label[1])
print(data[0])

index = imdb.get_word_index()  # word to index
reverse_index = dict([(value, key) for (key, value) in index.items()])  # id to word
decoded = " ".join([reverse_index.get(i - 3, "#") for i in data[0]])
print("Decoded Review:", decoded)

data = vectorize(data)
label = np.array(label).astype("float32")

labelDF = pd.DataFrame({'label': label})
sns.countplot(x='label', data=labelDF)

X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=0.20, random_state=1)

model = models.Sequential()
model.add(layers.Dense(50, activation="relu", input_shape=(10000,)))
model.add(layers.Dropout(0.3, noise_shape=None, seed=None))
model.add(layers.Dense(50, activation="relu"))
model.add(layers.Dropout(0.2, noise_shape=None, seed=None))
model.add(layers.Dense(50, activation="relu"))
model.add(layers.Dense(1, activation="sigmoid"))

model.summary()

callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
model.compile(
    optimizer="adam",
    loss="binary_crossentropy",
    metrics=["accuracy"]
)

results = model.fit(
    X_train, y_train,
    epochs=2,
    batch_size=500,
    validation_data=(X_test, y_test),
    callbacks=[callback]
)

print("Validation Accuracy:", np.mean(results.history["val_accuracy"]))

score = model.evaluate(X_test, y_test, batch_size=500)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

print("Keys in Results:", results.history.keys())

plt.plot(results.history['accuracy'])
plt.plot(results.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

plt.plot(results.history['loss'])
plt.plot(results.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
